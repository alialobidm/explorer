  <div class="row d-flex">
    <div class='col-12 col-xl-6 mb-4'>
      <div class='card' id='TokenAttributes'></div>
    </div>
    <div class='col-12 col-xl-6 mb-4'>
      <div class='card' id='TokenStatistic'></div>
    </div>
    <div class='col-12 col-xl-6 mb-4'>
      <div class='card' id='TokenHolderOfToken'></div>
    </div>
  </div>
  <script type="module">
      class TokenAttributes extends BootstrapVerticalTableComponent {
          configuration() {
              return {
                  topElement: response => response.EVM.Transfers,
                  chainId: response => response.EVM.Transfers[0]?.ChainId,
                  title: () => 'Token Attributes',
                  id: 'TokenAttributes',
                  columns: [
                      {
                          name: 'Symbol', cell: row => row.Transfer.Currency.Symbol
                      },
                      {
                          name: 'Name', cell: row => row.Transfer.Currency.Name
                      },
                      {
                          name: 'Number of Decimals', cell: row => row.Transfer.Currency.Decimals
                      },
                      {
                          name: "Balance", cell: row => row.sum
                      },
                      {
                          name: 'Protocol name', cell: row => row.Transfer.Currency.ProtocolName
                      },
                  ]
              }
          }
      }

      class TokenStatistic extends BootstrapVerticalTableComponent {
          configuration() {
              return {
                  topElement: response => response.EVM.Transfers,
                  chainId: response => response.EVM.Transfers[0]?.ChainId,
                  title: () => 'Token Transfer Statistics',
                  id: 'TokenStatistic',
                  columns: [
                      {
                          name: 'Transfer Count', cell: row => row.count
                      },
                      {
                          name: 'Uniq Senders', cell: row => row.sender_count
                      },
                      {
                          name: 'Uniq Receivers', cell: row => row.receiver_count
                      },
                      {
                          name: 'First transfer date', cell: row => row.Block.min_date
                      },
                      {
                          name: 'Last transfer date', cell: row => row.Block.max_date
                      },
                      {
                          name: 'Days token transferred', cell: row => row.days
                      },
                  ],
                  options: {
                      columnTitle1: 'Metric',
                      columnTitle2: 'Value',
                  },
              }
          }
      }

      class TokenHolderOfToken extends BootstrapTableComponent {
          configuration() {
              return {
                  topElement: response => response.EVM.BalanceUpdates,
                  chainId: response => response.EVM.BalanceUpdates[0]?.ChainId,
                  title: () => 'Token Holder of Token',
                  id: 'TokenHolderOfToken',
                  columns: [
                      {
                          name: 'Holder', cell: row => row.BalanceUpdate.Address,
                          rendering: renderJustAddressLink,
                      },
                      {
                          name: 'Balance of the token', cell: row => row.Balance,
                          rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                      },
                  ]
              }
          }
      }

      const variables = {
          network: '<%= @streaming%>',
          address: '<%= @address %>',
      }
      renderComponent('<%=@streaming_access_token %>', [[TokenAttributes, '#TokenAttributes']], 'Token-attributes_4', variables);
      renderComponent('<%=@streaming_access_token %>', [[TokenStatistic, '#TokenStatistic']], 'Token-transfer-statistics_4', variables);
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
          renderComponent('<%=@streaming_access_token %>', [[TokenHolderOfToken, '#TokenHolderOfToken']], 'Token-holder-of-token_3', variables);
      })
  </script>
