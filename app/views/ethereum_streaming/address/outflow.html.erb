<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='LatestOutboundTransfers'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='OutboundTransfersInNativeCurrency'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='OutboundTransfersInTokens'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TopReceiversInNativeCurrency'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TopReceiversInTokens'></div>
  </div>
</div>
<script type="module">
    class LatestOutboundTransfers extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `Latest ${tokenName} ${tokenSymbol} Outbound Transfers`
                },
                id: 'LatestOutboundTransfers',
                columns: [
                    {
                        name: 'Timestamp', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block.Number,
                        rendering: renderBlockLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Receiver', cell: row => row.Transfer.Receiver,
                        rendering: renderJustAddressLink, headerStyle: {width: '25%'},
                    },
                    {
                        name: 'Amount', cell: row => row.sum,
                        rendering: renderNumbersWithCurrency, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Transaction hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '136px'},
                    },
                ]
            }
        }
    }

    class OutboundTransfersInNativeCurrency extends ComboChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `${WidgetConfig.getCurrency(response.EVM.Transfers[0]?.ChainId) ? WidgetConfig.getCurrency(response.EVM.Transfers[0]?.ChainId) : 'Native currency'} Send by ${tokenName} ${tokenSymbol} Contract`
                },
                id: 'OutboundTransfersInNativeCurrency',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Volume', cell: row => +row.sum,
                    },
                    {
                        name: 'Count', cell: row => +row.count,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    vAxis: {
                        scaleType: 'log',
                        viewWindow: {
                            // max: 10000,
                            min: 0.00001
                        },
                    },
                    tooltip: {
                        ignoreBounds: true
                    },
                    legend: {position: 'top'}
                }
            }
        }
    }

    class OutboundTransfersInTokens extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `${WidgetConfig.getCurrency(response.EVM.Transfers[0]?.ChainId) ? WidgetConfig.getCurrency(response.EVM.Transfers[0]?.ChainId) : 'Native currency'} sent by ${tokenName} ${tokenSymbol} Contract`
                },
                id: 'OutboundTransfersInTokens',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Receive count', cell: row => +row.count,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    vAxis: {
                        scaleType: 'log',
                        viewWindow: {
                            // max: 10000,
                            min: 0.00001
                        },
                    },
                    tooltip: {
                        ignoreBounds: true
                    },
                    legend: {position: 'top'}
                }
            }
        }
    }

    class TopReceiversInNativeCurrency extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => `Top Receiver in ${WidgetConfig.getCurrency(response.EVM.Transfers[0]?.ChainId) ? WidgetConfig.getCurrency(response.EVM.Transfers[0]?.ChainId) : 'native'} currency`,
                id: 'TopReceiversInNativeCurrency',
                columns: [
                    {
                        name: 'Receiver', cell: row => row.Transfer.Receiver,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Amount', cell: row => row.Transfer.Amount,
                        rendering: renderNumbersWithCurrency, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Latest Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Transaction hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '136px'},
                    },
                ]
            }
        }
    }

    class TopReceiversInTokens extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: () => `Top Receivers in tokens`,
                id: 'TopReceiversInTokens',
                columns: [
                    {
                        name: 'Receiver', cell: row => row.Transfer.Receiver,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Amount', cell: row => row.Transfer.Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Currency', cell: row => ({
                            currency: row.Transfer.Currency.Symbol,
                            smartContract: row.Transfer.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '79px'},
                    },
                    {
                        name: 'Latest Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Transaction hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '136px'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        address: '<%= @address %>',
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 3))).toISOString().slice(0, 10)
    }
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[LatestOutboundTransfers, '#LatestOutboundTransfers']], 'Latest-Outbound-Transfers_2', variables);
        renderComponent('<%=@streaming_access_token %>', [[OutboundTransfersInNativeCurrency, '#OutboundTransfersInNativeCurrency']], 'Outbound-transfers-in-native-currency_7', variables);
        renderComponent('<%=@streaming_access_token %>', [[OutboundTransfersInTokens, '#OutboundTransfersInTokens']], 'Outbound-transfers-in-tokens_3', variables);
        renderComponent('<%=@streaming_access_token %>', [[TopReceiversInNativeCurrency, '#TopReceiversInNativeCurrency']], 'Top-Receivers-in-native-currency_4', variables);
        renderComponent('<%=@streaming_access_token %>', [[TopReceiversInTokens, '#TopReceiversInTokens']], 'Top-Receivers-in-tokens_2', variables);
    })

</script>
