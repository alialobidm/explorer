<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='LatestTransactions' class='card'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TopSmartContractCaller'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TopGasBurnerForSmartContract'></div>
  </div>
</div>
<script type="module">
    class LatestTransactions extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.Calls],
                chainId: response => response.EVM.Calls[0]?.ChainId,
                id: 'LatestTransactions',
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Latest Transactions`
                },
                columns: [
                    {
                        name: 'Timestamp', cell: row => row.Block?.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block?.Number,
                        rendering: renderBlockLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Method',
                        cell: row => ({
                            method: row.Call?.Signature.Name,
                            hash: row.Call?.Signature.SignatureHash,
                            value: row.Call?.Value
                        }),
                        rendering: renderMethodLink,
                    },
                    {
                        name: 'Caller', cell: row => row.Call?.From,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Gas Cost', cell: row => row.sum,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Hash', cell: row => row.Transaction?.Hash,
                        rendering: renderTX, headerStyle: {width: '110px'},
                    },
                ]
            }
        }
    }

    class TopSmartContractCaller extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Calls,
                chainId: response => response.EVM.Calls[0].ChainId,
                id: 'TopSmartContractCaller',
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency.Symbol})` : ''
                    return `Top ${tokenName} ${tokenSymbol} Smart Contract Caller`
                },
                columns: [
                    {
                        name: 'Caller', cell: row => row.Call.From,
                        rendering: renderJustAddressLink, headerStyle: {width: '44%'},
                    },
                    {
                        name: 'Latest Date', cell: row => row.Block.Date
                    },
                    {
                        name: 'Gas Cost', cell: row => row.average,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Calls Count', cell: row => row.count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                ]
            }
        }
    }

    class TopGasBurnerForSmartContract extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Calls,
                chainId: response => response.EVM.Calls[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency.Symbol})` : ''
                    return `Top Gas burner for ${tokenName} ${tokenSymbol} Smart Contract`
                },
                id: 'TopGasBurnerForSmartContract',
                columns: [
                    {
                        name: 'Caller', cell: row => row.Call.From,
                        rendering: renderJustAddressLink, headerStyle: {width: '44%'},
                    },
                    {
                        name: 'Latest Date', cell: row => row.Block.Date
                    },
                    {
                        name: 'Gas Burnt', cell: row => row.average,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Calls Count', cell: row => row.count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        address: '<%= @address%>',
    }

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[LatestTransactions, '#LatestTransactions']], 'Latest-Transactions_8', variables);
        renderComponent('<%=@streaming_access_token %>', [[TopSmartContractCaller, '#TopSmartContractCaller']], 'Top-Smart-Contract-Caller_1', variables);
        renderComponent('<%=@streaming_access_token %>', [[TopGasBurnerForSmartContract, '#TopGasBurnerForSmartContract']], 'Top-Gas-burner-for-Smart-Contract_2', variables);
    })
</script>
