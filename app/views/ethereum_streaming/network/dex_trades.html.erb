<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='SubTokenTradesTable' class='card'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeTrades'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeAddress'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeCurrencies'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeContracts'></div>
  </div>
</div>

<script type="module">
    class SubTokenTradesTable extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Token Trades',
                id: 'SubTokenTradesTable',
                columns: [
                    {
                        name: 'Timestamp', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block.Number,
                        rendering: renderBlockLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Sell amount', cell: row => row.Trade.Sell.Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '108px'},
                    },
                    {
                        name: 'Sell currency', cell: row => ({
                            currency: row.Trade.Sell.Currency.Symbol,
                            smartContract: row.Trade.Sell.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '108px'},
                    },
                    {
                        name: '', cell: row => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buy amount', cell: row => row.Trade.Buy.Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '108px'},
                    },
                    {
                        name: 'Buy currency', cell: row => ({
                            currency: row.Trade.Buy.Currency.Symbol,
                            smartContract: row.Trade.Buy.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '108px'},
                    },
                    {
                        name: 'Protocol', cell: row => ({
                            ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                            ProtocolName: row.Trade.Dex.ProtocolName,
                            ProtocolVersion: row.Trade.Dex.ProtocolVersion
                        }),
                        rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Smart Contract', cell: row => row.Trade.Dex.SmartContract,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '100px'},
                    },
                ]
            }
        }
    }

    class TradesByTimeTrades extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Trades by Time',
                id: 'TradesByTimeTrades',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Trades', cell: row => +row.trades,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['FFC106'],
                    legend: {position: "top"},
                }
            }
        }
    }

    class TradesByTimeAddress extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Trade Takers by Time',
                id: 'TradesByTimeAddress',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Trades addresses', cell: row => +row.traders,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['28A745'],
                    legend: {position: "top"},
                }
            }
        }
    }

    class TradesByTimeCurrencies extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Traded Currencies by Time',
                id: 'TradesByTimeCurrencies',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Currencies', cell: row => +row.contracts,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['28A745'],
                    legend: {position: "top"},
                }
            }
        }
    }

    class TradesByTimeContracts extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'DEX Smart Contracts by Time',
                id: 'TradesByTimeContracts',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Uniq Contracts', cell: row => +row.currencies,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['FFC106'],
                    legend: {position: "top"},
                }
            }
        }
    }


    const variables = {
        network: '<%= @streaming %>',
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 2))).toISOString().slice(0, 10),
    }

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[SubTokenTradesTable, '#SubTokenTradesTable']], 'Token-Trades_4', variables, 'Subscription-Token-Trades_1_1');
        renderComponent('<%=@streaming_access_token %>', [
            [TradesByTimeTrades, '#TradesByTimeTrades'],
            [TradesByTimeAddress, '#TradesByTimeAddress'],
            [TradesByTimeCurrencies, '#TradesByTimeCurrencies'],
            [TradesByTimeContracts, '#TradesByTimeContracts']
        ], 'Trades-By-Time', variables);
    })
</script>
