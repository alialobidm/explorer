<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradedCurrenciesByTime'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByPairs'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='SubTokenTradePairs' class='card'></div>
  </div>
</div>
<script type="module">
    class TradedCurrenciesByTime extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Traded Currencies by Time',
                id: 'TradedCurrenciesByTime',
                columns: [
                    {
                        name: 'Days', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Currencies', cell: row => +row.uniq,
                    },
                ],
                options: {
                    isStacked: true,
                    theme: 'material',
                    height: 397,
                    legend: {position: "top"},
                }
            }
        }
    }

    class TradesByPairs extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Trades by Pairs',
                id: 'TradesByPairs',
                columns: [
                    {
                        name: 'Pair', cell: row => ({
                            buyCurrencySymbol: row.Trade.Buy.Currency.Symbol,
                            buyCurrencySC: row.Trade.Buy.Currency.SmartContract,
                            sellCurrencySymbol: row.Trade.Sell.Currency.Symbol,
                            sellCurrencySC: row.Trade.Sell.Currency.SmartContract,
                        }),
                        rendering: renderPairLink,
                    },
                    {
                        name: 'Trades', cell: row => row.count,
                        headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Amount', cell: row => row.Buy_Amount,
                        rendering: renderNumbersWithCurrency, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Started', cell: row => row.Block.Date, headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Days traded', cell: row => row.uniq,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '100px'},
                    },
                ]
            }
        }
    }

    class SubTokenTradePairs extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Token Trade Pairs by Trades',
                id: 'SubTokenTradePairs',
                columns: [
                    {
                        name: 'Timestamp', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Sell amount', cell: row => row.Sell_Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Sell currency', cell: row => ({
                            currency: row.Trade.Sell.Currency.Symbol,
                            smartContract: row.Trade.Sell.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: '', cell: row => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buy amount', cell: row => row.Buy_Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Buy currency', cell: row => ({
                            currency: row.Trade.Buy.Currency.Symbol,
                            smartContract: row.Trade.Buy.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '106px'},
                    },
                    {
                        name: 'Trades', cell: row => row.count, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Median Price', cell: row => row.median_price,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Last Price', cell: row => row.Trade.Buy.last_price,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '110px'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
    };

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[TradedCurrenciesByTime, '#TradedCurrenciesByTime']], 'Traded-currencies-by-time_1', variables);
        renderComponent('<%=@streaming_access_token %>', [[TradesByPairs, '#TradesByPairs']], 'Trades-By-Pairs_1_1_1', variables);
        renderComponent('<%=@streaming_access_token %>', [[SubTokenTradePairs, '#SubTokenTradePairs']], 'Token-Trade-Pairs_1_1_1_1_1_1_1_1_1', variables, 'Subscription-Token-Trade-Pairs_1');
    });

</script>
