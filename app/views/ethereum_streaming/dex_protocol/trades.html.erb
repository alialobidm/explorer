<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='TokenTrades' class='card'></div>
  </div>
</div>
<script type="module">
    class TokenTrades extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title:()=>`Latest Token Trades`,
                id:'TokenTrades',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block.Number,
                        rendering: renderBlockLink
                    },
                    {
                        name: 'Seller', cell: row => row.Trade.Buy.Seller,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Sell currency', cell: row => ({
                            currency: row.Trade.Sell.Currency.Symbol,
                            smartContract: row.Trade.Sell.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width:'107px'},
                    },
                    {
                        name: 'Sell amount', cell: row => row.Trade.Sell.Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end',width:'100px'},
                    },
                    {
                        name: '', cell: row => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buyer', cell: row => row.Trade.Buy.Buyer,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Buy currency', cell: row => ({
                            currency: row.Trade.Buy.Currency.Symbol,
                            smartContract: row.Trade.Buy.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,headerStyle: {width:'107px'},
                    },
                    {
                        name: 'Buy amount', cell: row => row.Trade.Buy.Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end',width:'100px'},
                    },
                    {
                        name: 'Hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX,headerStyle: {width: '100px'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        limit: 10,
        protocol: '<%= @protocol %>'
    }

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[TokenTrades, '#TokenTrades']], 'Token-Trades_6', variables);
    })
</script>
