<div class="col-12 col-lg-6 mb-4">
  <div class="card">
    <div class="card-header">
      <% if @token_info && @token_info.name && @token_info.symbol %>
        <%= t('widgets.headers.calls_by_time_token', token_name: @token_info.name, token_symbol: @token_info.symbol) %>
      <% else %>
        <%= t('widgets.headers.calls_by_time') %>
      <% end %>
    </div>
    <div class="card-body">
      <div id="calls_by_time"><%= t('loading') %></div>
    </div>
  </div>
</div>

<script type="module">
  document.addEventListener("DOMContentLoaded", function() {
    const query = new widgets.query(`
      query(
        $network: EthereumNetwork!,
        $dateFormat: String!,
        $address: String!,
        $from: ISO8601DateTime,
        $till: ISO8601DateTime
      ) {
        ethereum(network: $network) {
          smartContractCalls(date: { since: $from, till: $till }) {
            count: countBigInt(uniq: calls, caller: { is: $address })
            date {
              date(format: $dateFormat)
            }
          }
        }
      }
    `);

    new widgets.chartByTime('#calls_by_time', query, 'ethereum.smartContractCalls', {
      title: '<%= t('widgets.headers.calls_by_time') %>',
      chartOptions: {
        vAxes: {
          '0': {
            title: '<%= t('widgets.titles.calls_count') %>'
          }
        },
        seriesType: 'bars',
        series: {
          '0': { color: '#007bff' }
        }
      },
      dataOptions: [
        {
          title: { label: '<%= t('widgets.titles.date') %>', type: 'date' },
          path: 'date.date'
        },
        {
          title: { label: '<%= t('widgets.titles.calls_count') %>', type: 'number' },
          path: 'count'
        }
      ]
    });

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';
    const network = '<%= j params[:network][:network] %>';
    const address = '<%= j @address %>';

    queryWithTimeRange(rr, query, fromDate, tillDate, {
      network: network,
      address: address
    });
  });
</script>
