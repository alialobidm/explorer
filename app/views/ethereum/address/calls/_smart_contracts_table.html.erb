<div class="col-12 col-lg-6 mb-4">
  <div class="card">
    <div class="card-header">
      <% if @token_info && @token_info.name && @token_info.symbol %>
        <%= t('widgets.headers.smart_contracts_table_token', token_name: @token_info.name, token_symbol: @token_info.symbol) %>
      <% else %>
        <%= t('widgets.headers.smart_contracts_table') %>
      <% end %>
    </div>
    <div class="card-body">
      <div id="smart_contracts_table"><%= t('loading') %></div>
    </div>
  </div>
</div>

<script type="module">
  document.addEventListener("DOMContentLoaded", function() {
    const query = new widgets.query(`
      query (
        $network: EthereumNetwork!,
        $address: String!,
        $limit: Int!,
        $offset: Int!,
        $from: ISO8601DateTime,
        $till: ISO8601DateTime
      ) {
        ethereum(network: $network) {
          smartContractCalls(
            options: { desc: "count", limit: $limit, offset: $offset },
            date: { since: $from, till: $till },
            caller: { is: $address }
          ) {
            smartContract {
              address {
                address
                annotation
              }
              contractType
            }
            max_date: maximum(of: date)
            count
            uniq_methods: count(uniq: smart_contract_methods)
            gasValue(calculate: average)
            gas_value_usd: gasValue(in: USD, calculate: average)
          }
        }
      }
    `);

    new widgets.table('#smart_contracts_table', query, 'ethereum.smartContractCalls', {
      title: '<%= t('widgets.headers.smart_contracts_table') %>',
      dataOptions: [
        {
          title: '<%= t('widgets.titles.smart_contract') %>',
          type: 'string-ellipsis',
          path: ['smartContract.address.annotation', 'smartContract.address.address'],
          urlCallbackName: 'smart_contract_path'
        },
        {
          title: '<%= t('widgets.titles.max_date') %>',
          type: 'string',
          path: 'max_date'
        },
        {
          title: '<%= t('widgets.titles.avg_gas_value') %>',
          type: 'amount',
          path: 'gasValue'
        },
        {
          renderCallback: '<%= j render partial: "ethereum/currency_with_amount_usd", formats: :text, locals: { currency: "", amount: "item.gas_value_usd" } %>'
        },
        {
          title: '<%= t('widgets.titles.uniq_methods') %>',
          type: 'count',
          path: 'uniq_methods'
        },
        {
          title: '<%= t('widgets.titles.calls_count') %>',
          type: 'count',
          path: 'count',
          data: '%{DATA} <span class="fa fa-list"></span>',
          urlCallbackName: 'call_count_path'
        }
      ]
    });

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';
    const network = '<%= j params["network"]["network"] %>';
    const address = '<%= j @address %>';

    queryWithTimeRange(rr, query, fromDate, tillDate, {
      network: network,
      address: address
    });
  });
</script>
