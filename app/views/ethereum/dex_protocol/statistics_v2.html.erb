<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TokenTrades'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradedCurrenciesByTime'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='FeeByTime'></div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='BuyerSeller'></div>
  </div>
</div>

<script type="module">
  class TokenTrades extends TimeChartComponent {
    configuration() {
      return {
        topElement: response => response.EVM.DEXTrades,
        chainId: response => response.EVM.DEXTrades[0].ChainId,
        title: () => `Token Trades by Date`,
        id: 'TokenTrades',
        columns: [
          {
            name: 'Date', cell: row => row.Block.Date
          },
          {
            name: 'Trades', cell: row => +row.count
          }
        ],
        options: {
          height: 300,
          theme: 'material',
          colors: ['28A745'],
        }
      }
    }
  }

  class TradedCurrenciesByTime extends TimeChartComponent {
    configuration() {
      return {
        topElement: response => response.EVM.DEXTrades,
        chainId: response => response.EVM.DEXTrades[0].ChainId,
        title: () => `Traded Currencies by Date`,
        id: 'TradedCurrenciesByTime',
        columns: [
          {
            name: 'Date', cell: row => row.Block.Date
          },
          {
            name: 'Sell currency', cell: row => +row.currency_sell
          },
          {
            name: 'Buy currency', cell: row => +row.currency_buy
          }
        ],
        options: {
          height: 300,
          theme: 'material',
          legend: { position: 'top' },
        }
      }
    }
  }

  class FeeByTime extends ComboChartComponent {
    configuration() {
      return {
        topElement: response => response.EVM.DEXTrades,
        chainId: response => response.EVM.DEXTrades[0].ChainId,
        title: () => `Transaction Fee by Date`,
        id: 'FeeByTime',
        columns: [
          {
            name: 'Date', cell: row => row.Block.Date
          },
          {
            name: 'Sender Fee', cell: row => +row.sender_fee
          },
          {
            name: 'Burnt Fee', cell: row => +row.burnt
          },
          {
            name: row => `${WidgetConfig.getBlockProducerName(row.ChainId)} Reward`,
            cell: row => +row.reward
          }
        ],
        options: {
          height: 300,
          legend: { position: 'top' },
        }
      }
    }
  }

  class BuyerSeller extends TimeChartComponent {
    configuration() {
      return {
        topElement: response => response.EVM.DEXTrades,
        chainId: response => response.EVM.DEXTrades[0].ChainId,
        title: () => `Uniq Sellers and Buyers by Date`,
        id: 'BuyerSeller',
        columns: [
          {
            name: 'Date', cell: row => row.Block.Date
          },
          {
            name: 'Uniq Buyers', cell: row => +row.buyer
          },
          {
            name: 'Uniq Sellers', cell: row => +row.seller
          }
        ],
        options: {
          height: 300,
          theme: 'material',
          legend: { position: 'top' },
        }
      }
    }
  }

  const variables = {
    network: '<%= j @streaming %>',
    protocol: '<%= j @protocol %>',
  }

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
    renderComponent('<%= j @streaming_access_token %>', [[TokenTrades, '#TokenTrades'], [TradedCurrenciesByTime, '#TradedCurrenciesByTime'], [FeeByTime, '#FeeByTime'], [BuyerSeller, '#BuyerSeller']], 'statistic-by-dex-protocol_3', variables);
  });
</script>
