<% api_version = api_version_for_protocol %>
<% if api_version == 'v1' %>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.latest_token_trades') %></div>
      <div class="card-body">
        <div id="latest_token_trades"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script type="module">

    $( document ).ready(function() {

        var query = new widgets.query(`
                        query ($network: EthereumNetwork!,
                                $limit: Int!,
                                $offset: Int!,
                                $protocol: String!,
                                $from: ISO8601DateTime,
                                $till: ISO8601DateTime){
                    ethereum(network: $network){
                      dexTrades(options:{desc: ["block.height","tradeIndex"], limit: $limit, offset: $offset},
                        date: {since: $from till: $till },
                        protocol: {is: $protocol}
                        ) {

                          block {
                            timestamp {
                              time (format: "%Y-%m-%d %H:%M:%S")
                            }
                            height
                          }

                          tradeIndex
                          protocol
                          exchange {
                            fullName
                          }

                          smartContract {
                            address {
                              address
                              annotation
                            }
                          }

                          buyAmount
                          buy_amount_usd: buyAmount(in: USD)
                          buyCurrency {
                            address
                            symbol
                          }

                          sellAmount
                          sell_amount_usd: sellAmount(in: USD)
                          sellCurrency {
                            address
                            symbol
                          }

                          transaction {
                            hash
                          }

                      }
                    }
                  }`);

        new widgets.table('#latest_token_trades', query, 'ethereum.dexTrades', {
            title: '<%= t('widgets.headers.latest_token_trades') %>',
            dataOptions: [
                {
                    title: '<%= t('widgets.titles.timestamp') %>',
                    type: 'string',
                    path: 'block.timestamp.time',
                    style: 'width: 170px;'
                },
                {
                    title: '<%= t('widgets.titles.block') %>',
                    type: 'string',
                    path: 'block.height',
                    urlCallbackName: 'block_path',
                    style: 'width: 80px;'
                },

                {
                    title: '<%= t('widgets.titles.sell_amount') %>',
                    type: 'amount',
                    path: 'sellAmount'
                },
                {
                    title: '<%= t('widgets.titles.sell_currency') %>',
                    type: 'string',
                    path: 'sellCurrency.symbol',
                    urlCallbackName: 'sell_token_path',
                    renderCallback: <%= render partial: 'ethereum/currency_with_amount_usd', formats: :text, locals: {currency: 'item.sellCurrency.symbol', amount: 'item.sell_amount_usd'} %>
                },
                {
                    title: '',
                    type: 'string',
                    data: '<i class="fa fa-sign-in text-success"></i>',
                    html_class: 'text-center'
                },

                {
                    title: '<%= t('widgets.titles.buy_amount') %>',
                    type: 'amount',
                    path: 'buyAmount'
                },
                {
                    title: '<%= t('widgets.titles.buy_currency') %>',
                    type: 'string',
                    path: 'buyCurrency.symbol',
                    urlCallbackName: 'buy_token_path',
                    renderCallback: <%= render partial: 'ethereum/currency_with_amount_usd', formats: :text, locals: {currency: 'item.buyCurrency.symbol', amount: 'item.buy_amount_usd'} %>
                },
                {
                    title: '<%= t('widgets.titles.protocol') %>',
                    path: 'protocol'
                },
                {
                    title: '<%= t('widgets.titles.exchange') %>',
                    path: 'exchange.fullName'
                },
                {
                    title: '<%= t('widgets.titles.smart_contract') %>',
                    type: 'string-ellipsis',
                    path: ['smartContract.address.annotation', 'smartContract.address.address'],
                    urlCallbackName: 'smart_contract_path'
                },
                {
                    title: '<%= t('widgets.titles.hash') %>',
                    type: 'string-ellipsis',
                    path: 'transaction.hash',
                    urlCallbackName: 'transaction_path'
                },


            ]
        });

        const fromDate = '<%= j @from %>';
        const tillDate = '<%= j @till %>';

        queryWithTimeRange(rr, query, fromDate, tillDate,{
            network: '<%= params['network']['network'] %>',
            protocol: '<%= @protocol %>'
        });

    });
 
</script>
 
<% elsif api_version == 'v2' %>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div id="LiveTradesDEXProtocol" class="card"></div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div id="DEXProtocolTradesByDate" class="card"></div>
  </div>
</div>
<script type="module">
    class DEXProtocolTradesByDate extends TimeChartComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                headerTitle: function (response) {
                  return 'DEX Protocol Trades By Date';
                },
                columns: [
                    {
                        name: 'Date', cell: function (row) {
                            return row.Block.Date
                        }
                    },
                    {
                        name: 'Count', cell: function (row) {
                            return +row.count
                        }
                    }
                ],
                options: {
                    title: 'Trades By Date',
                    height: 300
                }
            }
        }
    }

    class LiveTradesDEXProtocol extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: function (response) {
                    return response.EVM.DEXTrades
                },
                chainId: function (response) {
                    return response.EVM.DEXTrades[0].ChainId
                },
                columns: [
                    {
                        name: 'Time', cell: function (row) {
                            return row.Block.Time
                        }, rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: function (row) {
                            return row.Block.Number
                        }, rendering: renderBlockLink,headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Buy price', cell: function (row) {
                            return row.Trade.Buy.Price
                        }, rendering: renderNumbersWithCurrency,  headerStyle: {textAlign: 'end'},
                    },

                    {
                        name: 'Buyer', cell: function (row) {
                            return row.Trade.Buy.Buyer
                        }, rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: function (row) {
                            return ''
                        }, rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Seller', cell: function (row) {
                            return row.Trade.Buy.Seller
                        }, rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Sell price', cell: function (row) {
                            return row.Trade.Sell.Price
                        }, rendering: renderNumbers,  headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Sell currency', cell: function (row) {
                            return {
                                currency: row.Trade.Sell.Currency.Symbol,
                                smartContract: row.Trade.Sell.Currency.SmartContract
                            }
                        }, rendering: renderTokenLink,
                    },
                    {
                        name: 'Dex', cell: function (row) {
                            return {
                                ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                                ProtocolName: row.Trade.Dex.ProtocolName,
                                ProtocolVersion: row.Trade.Dex.ProtocolVersion
                            }
                        }, rendering: renderDexProtocolLink,headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Transaction', cell: function (row) {
                            return row.Transaction.Hash
                        }, rendering: renderTX, headerStyle: {width: '100px'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        limit: 10,
        offset: 0,
        protocol: '<%= @protocol %>',
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 7))).toISOString().slice(0, 10)
    } 
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>',[[DEXProtocolTradesByDate, "#DEXProtocolTradesByDate"]], 'DEX-Protocol-Trades-By-Date', variables);})
    renderComponent('<%=@streaming_access_token %>',[[LiveTradesDEXProtocol, "#LiveTradesDEXProtocol"]], 'Latest-Trades-on-DEX-Protocol', variables, 'Live-Trades-on-DEX-Protocol');
</script>


<% end %>
