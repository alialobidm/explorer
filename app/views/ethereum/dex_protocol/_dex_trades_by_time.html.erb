<% api_version = api_version_for_protocol %>
<% if api_version == 'v1' %>
  <div class="row">
    <div class="col-12 col-lg-6 mb-4">
      <div class="card">
        <div class="card-header"><%= t('widgets.headers.trades_by_time') %></div>
        <div class="card-body">
          <div id="trades_by_time"><%= t('loading') %></div>
        </div>
      </div>
    </div>
    <div class="col-12 col-lg-6 mb-4">
      <div class="card">
        <div class="card-header"><%= t('widgets.headers.token_takers') %></div>
        <div class="card-body">
          <div id="unique_traders_by_time"><%= t('loading') %></div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-12 col-lg-6 mb-4">
      <div class="card">
        <div class="card-header"><%= t('widgets.headers.unique_currencies_by_time') %></div>
        <div class="card-body">
          <div id="unique_currencies_by_time"><%= t('loading') %></div>
        </div>
      </div>
    </div>
    <div class="col-12 col-lg-6 mb-4">
      <div class="card">
        <div class="card-header"><%= t('widgets.headers.unique_dex_smart_contracts_by_time') %></div>
        <div class="card-body">
          <div id="unique_dex_smart_contracts_by_time"><%= t('loading') %></div>
        </div>
      </div>
    </div>
  </div>
  <script type="module">
    $( document ).ready(function() {

        var query = new widgets.query(`
            query ($network: EthereumNetwork!,
                  $dateFormat: String!,
                  $protocol: String!,
                  $from: ISO8601DateTime,
                  $till: ISO8601DateTime){
                    ethereum(network: $network ){
                      dexTrades(options:{asc: "date.date"},
                      protocol: {is: $protocol}
                      date: {
                        since: $from
                        till: $till}

                      ) {
                        date: date{
                          date(format: $dateFormat)
                        }

                            trades: count
                            traders: count(uniq: takers)
                            contracts: count(uniq: smart_contracts)
                            currencies: count(uniq: buy_currency)

                      }
                    }
                  }`);

        new widgets.chartByTime('#trades_by_time', query, 'ethereum.dexTrades', {
            title: '<%= t('widgets.headers.trades_by_time') %>',
            chartOptions: {
                vAxes: {
                    '0': {
                        title: '<%= t('widgets.titles.trades') %>'
                    }
                },
                seriesType: 'bars',
                series: {
                    '0': { color: '#28a745' }
                },
            },
            dataOptions: [
                {
                    title: {label: '<%= t('widgets.titles.date') %>', type: 'date' },
                    path: 'date.date'
                },
                {
                    title: '<%= t('widgets.titles.trades') %>',
                    path: 'trades'
                },

            ]
        });

        new widgets.chartByTime('#unique_traders_by_time', query, 'ethereum.dexTrades', {
            title: '<%= t('widgets.headers.token_takers') %>',
            chartOptions: {
                vAxes: {
                    '0': {
                        title: '<%= t('widgets.titles.traders') %>'
                    }
                },
                seriesType: 'bars',
                series: {
                    '0': { color: '#ffc107' }
                },
            },
            dataOptions: [
                {
                    title: {label: '<%= t('widgets.titles.date') %>', type: 'date' },
                    path: 'date.date'
                },
                {
                    title: '<%= t('widgets.titles.traders') %>',
                    path: 'traders'
                },

            ]
        });

        new widgets.chartByTime('#unique_currencies_by_time', query, 'ethereum.dexTrades', {
            title: '<%= t('widgets.headers.unique_currencies_by_time') %>',
            chartOptions: {
                vAxes: {
                    '0': {
                        title: '<%= t('widgets.titles.currencies') %>'
                    }
                },
                seriesType: 'bars',
                series: {
                    '0': { color: '#28a745' }
                },
            },
            dataOptions: [
                {
                    title: {label: '<%= t('widgets.titles.date') %>', type: 'date' },
                    path: 'date.date'
                },
                {
                    title: '<%= t('widgets.titles.currencies') %>',
                    path: 'currencies'
                },

            ]
        });

        new widgets.chartByTime('#unique_dex_smart_contracts_by_time', query, 'ethereum.dexTrades', {
            title: '<%= t('widgets.headers.unique_dex_smart_contracts_by_time') %>',
            chartOptions: {
                vAxes: {
                    '0': {
                        title: '<%= t('widgets.titles.uniq_contracts') %>'
                    }
                },
                seriesType: 'bars',
                series: {
                    '0': { color: '#ffc107' }
                },
            },
            dataOptions: [
                {
                    title: {label: '<%= t('widgets.titles.date') %>', type: 'date' },
                    path: 'date.date'
                },
                {
                    title: '<%= t('widgets.titles.uniq_contracts') %>',
                    path: 'contracts'
                },

            ]
        });

        const fromDate = '<%= j @from %>';
        const tillDate = '<%= j @till %>';

        queryWithTimeRange(rr, query, fromDate, tillDate,{
            network: '<%= params['network']['network'] %>',
            protocol: '<%= @protocol %>'
        });


    });
  </script>
<% elsif api_version == 'v2' %>
<% ['trades', 'traders', 'contracts', 'currencies'].each_slice(2) do |pair| %>
  <div class="row">
    <% pair.each do |id| %>
      <div class="col-12 col-lg-6 mb-4">
        <div class="card">
          <div class="card-body">
            <div id="<%= id %>"></div>
          </div>
        </div>
      </div>
    <% end %>
  </div>
<% end %>


<script type="module">
function createDEXProtocolStatsClass(countField, title) {
  return class extends TimeChartComponent {
    configuration() {
      return {
        topElement: function (response) {
          return response.EVM.DEXTrades;
        },
        headerTitle: function (response) {
          return title;
        },
        columns: [
          {
            name: 'Date',
            cell: function (row) {
              return row.Block.Date;
            },
          },
          {
            name: 'Count',
            cell: function (row) {
              return +row[countField];
            },
          },
        ],
        options: {
          title: title,
          height: 300,
        },
      };
    }
  };
}

const variables = {
  network: '<%= @streaming%>',
  protocol: '<%= @protocol %>',
  till: new Date().toISOString().slice(0, 10),
  from: new Date(new Date().setDate(new Date().getDate() - 7)).toISOString().slice(0, 10),
};

  const fromDate = '<%= j @from %>';
  const tillDate = '<%= j @till %>';

  renderWithTime(variables, fromDate , tillDate, function f(variables) {
    renderComponent(
      '<%=@streaming_access_token %>',
      [
        [createDEXProtocolStatsClass('trades', 'Trades By Date'), "#trades"],
        [createDEXProtocolStatsClass('traders', 'Traders By Date'), "#traders"],
        [createDEXProtocolStatsClass('currencies', 'Currencies By Date'), "#currencies"],
        [createDEXProtocolStatsClass('contracts', 'Contracts By Date'), "#contracts"],
      ],
      'DEX-Protocol-Stats-by-Date',
      variables
    );
  }
);

</script>

<% end %>
