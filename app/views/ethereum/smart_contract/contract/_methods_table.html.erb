<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header">
        <% if @token_info && @token_info.name && @token_info.symbol %>
          <%= t('widgets.headers.smart_contract_methods_diagram_token', token_name: @token_info.name, token_symbol: @token_info.symbol) %>
        <% else %>
          <%= t('widgets.headers.smart_contract_methods_diagram') %>
        <% end %>
      </div>
      <div class="card-body">
        <div id="smart_contract_methods_diagram"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header">
        <% if @token_info && @token_info.name && @token_info.symbol %>
          <%= t('widgets.headers.smart_contract_methods_table_token', token_name: @token_info.name, token_symbol: @token_info.symbol) %>
        <% else %>
          <%= t('widgets.headers.smart_contract_methods_table') %>
        <% end %>
      </div>
      <div class="card-body">
        <div id="smart_contract_methods_table"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script type="module">
  document.addEventListener("DOMContentLoaded", function() {
    const query = new widgets.query(`
      query (
        $network: EthereumNetwork!,
        $address: String!,
        $limit: Int,
        $offset: Int,
        $from: ISO8601DateTime,
        $till: ISO8601DateTime
      ) {
        ethereum(network: $network) {
          smartContractCalls(
            options: { desc: "count", limit: $limit, offset: $offset },
            date: { since: $from, till: $till },
            smartContractAddress: { is: $address }
          ) {
            smartContractMethod {
              name
              signature
              signatureHash
            }
            count
            internal_count: count(external: false)
            external_count: count(external: true)
            senders: count(uniq: senders)
            txs: count(uniq: txs)
            gasValue(calculate: average)
            gas_value_usd: gasValue(in: USD, calculate: average)
            max_date: maximum(of: date)
          }
        }
      }
    `);

    new widgets.table('#smart_contract_methods_table', query, 'ethereum.smartContractCalls', {
      title: '<%= t('widgets.headers.smart_contract_methods_table') %>',
      dataOptions: [
        {
          title: '<%= t('widgets.titles.method') %>',
          type: 'string',
          path: ['smartContractMethod.name', 'smartContractMethod.signatureHash'],
          urlCallbackName: 'smart_contract_method_path'
        },
        {
          title: '<%= t('widgets.titles.method_signature') %>',
          type: 'string-ellipsis',
          path: 'smartContractMethod.signature'
        },
        {
          title: '<%= t('widgets.titles.avg_gas_value') %>',
          type: 'amount',
          path: 'gasValue'
        },
        {
          renderCallback: '<%= j(render partial: "ethereum/currency_with_amount_usd", formats: :text, locals: { currency: "", amount: "item.gas_value_usd" }) %>'
        },
        {
          title: '<%= t('widgets.titles.max_date') %>',
          type: 'string',
          path: 'max_date'
        },
        {
          title: '<%= t('widgets.titles.senders') %>',
          type: 'count',
          path: 'senders'
        },
        {
          title: '<%= t('widgets.titles.internal_calls_count') %>',
          type: 'count',
          path: 'internal_count',
          data: '%{DATA} <span class="fa fa-list"></span>',
          urlCallbackName: 'internal_call_method_count_path'
        },
        {
          title: '<%= t('widgets.titles.external_calls_count') %>',
          type: 'count',
          path: 'external_count',
          data: '%{DATA} <span class="fa fa-list"></span>',
          urlCallbackName: 'external_call_method_count_path'
        },
        {
          title: '<%= t('widgets.titles.calls_count') %>',
          type: 'count',
          path: 'count',
          data: '%{DATA} <span class="fa fa-list"></span>',
          urlCallbackName: 'call_method_count_path'
        }
      ]
    });

    new widgets.chart('#smart_contract_methods_diagram', query, 'ethereum.smartContractCalls', {
      chartType: 'BarChart',
      title: '<%= t('widgets.headers.smart_contract_methods_diagram') %>',
      chartOptions: {
        hAxis: {
          title: '<%= t('widgets.titles.calls_count') %>',
          minValue: 0
        },
        vAxis: {
          title: '<%= t('widgets.titles.method') %>'
        },
        seriesType: 'bars',
        isStacked: true,
        series: {
          '0': { color: '#28a745' },
          '1': { color: '#ffc107' }
        },
        chartArea: { left: '25%', right: '10%', top: 0, bottom: '15%' }
      },
      dataOptions: [
        {
          type: 'string',
          path: ['smartContractMethod.name', 'smartContractMethod.signatureHash'],
          title: '<%= t('widgets.titles.method') %>'
        },
        {
          type: 'count',
          path: 'external_count',
          title: '<%= t('widgets.titles.external_calls_count') %>'
        },
        {
          type: 'count',
          path: 'internal_count',
          title: '<%= t('widgets.titles.internal_calls_count') %>'
        }
      ]
    });

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';
    const address = '<%= j @address %>';
    const network = '<%= j params[:network][:network] %>';

    queryWithTimeRange(rr, query, fromDate, tillDate, {
      network: network,
      address: address
    });
  });
</script>
