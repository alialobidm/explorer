<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.latest_token_trades') %></div>
      <div class="card-body">
        <div id="latest_token_trades"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script type="module">

    $( document ).ready(function() {


        var query = new widgets.query(`
                        query ($network: EthereumNetwork!,
                                $token: String!,
                                $limit: Int!,
                                $offset: Int!
                                $from: ISO8601DateTime,
                                $till: ISO8601DateTime){
                    ethereum(network: $network){
                      dexTrades(options:{desc: ["block.height","tradeIndex"], limit: $limit, offset: $offset},
                        date: {since: $from till: $till }
                        baseCurrency: {is: $token}
                        ) {

                          block {
                            timestamp {
                              time (format: "%Y-%m-%d %H:%M:%S")
                            }
                            height
                          }

                          tradeIndex
                          protocol
                          exchange {
                            fullName
                          }

                          smartContract {
                            address {
                              address
                              annotation
                            }
                          }

                          baseAmount
                          baseCurrency {
                            address
                            symbol
                          }
                          base_amount_usd: baseAmount(in: USD)

                          quoteAmount
                          quoteCurrency {
                            address
                            symbol
                          }
                          quote_amount_usd: quoteAmount(in: USD)

                          transaction {
                            hash
                          }

                      }
                    }
                  }`);

        new widgets.table('#latest_token_trades', query, 'ethereum.dexTrades', {
            title: '<%= t('widgets.headers.latest_token_trades') %>',
            dataOptions: [
                {
                    title: '<%= t('widgets.titles.timestamp') %>',
                    type: 'string',
                    path: 'block.timestamp.time',
                    style: 'width: 170px;'
                },
                {
                    title: '<%= t('widgets.titles.block') %>',
                    type: 'string',
                    path: 'block.height',
                    urlCallbackName: 'block_path',
                    style: 'width: 80px;'
                },

                {
                    title: '<%= t('widgets.titles.base_amount') %>',
                    type: 'amount',
                    path: 'baseAmount'
                },
                {
                    title: '<%= t('widgets.titles.base_currency') %>',
                    type: 'string',
                    path: 'baseCurrency.symbol',
                    urlCallbackName: 'base_token_path',
                    renderCallback: <%= render partial: 'ethereum/currency_with_amount_usd', formats: :text, locals: {currency: 'item.baseCurrency.symbol', amount: 'item.base_amount_usd'} %>
                },
                {
                    title: '',
                    type: 'string',
                    data: '<i class="fa fa-sign-in text-success"></i>',
                    html_class: 'text-center'
                },

                {
                    title: '<%= t('widgets.titles.quote_amount') %>',
                    type: 'amount',
                    path: 'quoteAmount'
                },
                {
                    title: '<%= t('widgets.titles.quote_currency') %>',
                    type: 'string',
                    path: 'quoteCurrency.symbol',
                    urlCallbackName: 'quote_token_path',
                    renderCallback: <%= render partial: 'ethereum/currency_with_amount_usd', formats: :text, locals: {currency: 'item.quoteCurrency.symbol', amount: 'item.quote_amount_usd'} %>
                },
                {
                    title: '<%= t('widgets.titles.protocol') %>',
                    path: 'protocol'
                },
                {
                    title: '<%= t('widgets.titles.exchange') %>',
                    path: 'exchange.fullName'
                },
                {
                    title: '<%= t('widgets.titles.smart_contract') %>',
                    type: 'string-ellipsis',
                    path: ['smartContract.address.annotation', 'smartContract.address.address'],
                    urlCallbackName: 'smart_contract_path'
                },
                {
                    title: '<%= t('widgets.titles.hash') %>',
                    type: 'string-ellipsis',
                    path: 'transaction.hash',
                    urlCallbackName: 'transaction_path'
                },


            ]
        });

      const fromDate = '<%= j @from %>';
      const tillDate = '<%= j @till %>';

      queryWithTimeRange(rr, query, fromDate, tillDate,{
            network: '<%= params['network']['network'] %>',
            token: '<%= @address %>'
        });

    });

</script>