<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header">
        <% if @token_info && @token_info.name && @token_info.symbol %>
          <%= t('widgets.headers.calls_table_token', token_name: @token_info.name, token_symbol: @token_info.symbol) %>
        <% else %>
          <%= t('widgets.headers.calls_table') %>
        <% end %>
      </div>
      <div class="card-body">
        <div id="calls_table"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>
<script type="module">

    $( document ).ready(function() {


        var query = new widgets.query(`query (
                                        $address: String!,
                                        $limit: Int!,
                                        $offset: Int!
                                        $from: ISO8601DateTime,
                                        $till: ISO8601DateTime){
                                    tron{
                                      smartContractCalls(options:{desc: "block.timestamp.time", limit: $limit, offset: $offset},
                                        date: {since: $from till: $till },
                                        txFrom: {is: $address}) {

                                        block {
                                          timestamp {
                                            time (format: "%Y-%m-%d %H:%M:%S")
                                          }
                                          height
                                        }
                                        smartContractMethod {
                                          name
                                          signatureHash
                                        }
                                        smartContract {
                                          address {
                                            address
                                            annotation
                                          }
                                        }
                                        txHash
                                        external
                                        fee
                                        fee_usd: fee(in: USD)
                                            }
                                          }
                                        }`);

        new widgets.table('#calls_table', query, 'tron.smartContractCalls', {
            title: '<%= t('widgets.headers.calls_table') %>',
            dataOptions: [
                {
                    title: '<%= t('widgets.titles.timestamp') %>',
                    type: 'string',
                    path: 'block.timestamp.time',
                    style: 'width: 180px'
                },
                {
                    title: '<%= t('widgets.titles.block') %>',
                    type: 'string',
                    path: 'block.height',
                    urlCallbackName: 'block_path',
                    style: 'width: 100px'
                },

                {
                    title: '<%= t('widgets.titles.smart_contract') %>',
                    type: 'string-ellipsis',
                    path: ['smartContract.address.annotation', 'smartContract.address.address'],
                    urlCallbackName: 'smart_contract_path'
                },
                {
                    title: '<%= t('widgets.titles.method') %>',
                    type: 'string',
                    path: ['smartContractMethod.name','smartContractMethod.signatureHash'],
                    urlCallbackName: 'smart_contract_method_path',
                    style: 'width: 130px'
                },

                {
                    title: '<%= t('widgets.titles.fee') %>',
                    type: 'amount',
                    path: 'fee',
                    style: 'width: 100px'
                },
                {
                    style: 'width: 100px',
                    renderCallback: <%= render partial: 'ethereum/currency_with_amount_usd', formats: :text, locals: {currency: '""', amount: 'item.fee_usd'} %>
                },
                {
                    title: '<%= t('widgets.titles.transaction') %>',
                    type: 'string-ellipsis',
                    path: 'transaction.hash',
                    urlCallbackName: 'transaction_path'
                },
            ]
        });

        const fromDate = '<%= j @from %>';
        const tillDate = '<%= j @till %>';

        queryWithTimeRange(rr, query, fromDate, tillDate,{
            address: '<%= @address %>'
        });


    });

</script>