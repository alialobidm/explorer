<div class="col-12 col-lg-6 mb-4">
  <div class="card">
    <div class="card-header"><%= t('widgets.headers.currencies_sent_received') %></div>
    <div class="card-body">
      <div id="currencies_table"><%= t('loading') %></div>
    </div>
  </div>
</div>

<script type="module">
  document.addEventListener("DOMContentLoaded", function() {
    const graphql_query = `
      query ($network: EverscaleNetwork!, $limit: Int!, $offset: Int!, $from: ISO8601DateTime, $till: ISO8601DateTime, $address: String!) {
        everscale(network: $network) {
          transfers(
            options: { limit: $limit, offset: $offset, desc: ["count_in", "count_out"] },
            any: [{ transferReceiver: { is: $address } }, { transferSender: { is: $address } }],
            date: { since: $from, till: $till }
          ) {
            sum_in: amount(calculate: sum, transferReceiver: { is: $address })
            <%#= TODO sum_in_usd: amount(in: USD, calculate: sum, transferReceiver: { is: $address }) %>
            sum_out: amount(calculate: sum, transferSender: { is: $address })
            <%#= TODO sum_out_usd: amount(in: USD, calculate: sum, transferSender: { is: $address }) %>
            count_in: countBigInt(transferReceiver: { is: $address })
            count_out: countBigInt(transferSender: { is: $address })
            currency {
              address
              symbol
            }
          }
        }
      }
    `.trim();

    const query = new widgets.query(graphql_query);

    new widgets.table('#currencies_table', query, 'everscale.transfers', {
      title: '<%= t('widgets.headers.tx_calls') %>',
      dataOptions: [
        {
          title: '<%= t('widgets.titles.currency') %>',
          type: 'string-ellipsis',
          path: 'currency.symbol',
          urlCallbackName: 'token_path'
        },
        {
          title: '',
          type: 'string',
          data: '<i class="fa fa-sign-in text-success"></i>',
          html_class: 'text-center'
        },
        {
          title: '<%= t('widgets.titles.receive') %>',
          type: 'amount',
          path: 'sum_in'
        },
        {
          renderCallback: '<%= j(render partial: "ethereum/currency_with_amount_usd", formats: :text, locals: { currency: "", amount: "item.sum_in_usd" }) %>'
        },
        {
          title: '<%= t('widgets.titles.txs') %>',
          type: 'count',
          path: 'count_in',
          data: '%{DATA} <span class="fa fa-list"></span>',
          urlCallbackName: 'transfer_to_path'
        },
        {
          title: '<%= t('widgets.titles.send') %>',
          type: 'amount',
          path: 'sum_out'
        },
        {
          renderCallback: '<%= j(render partial: "ethereum/currency_with_amount_usd", formats: :text, locals: { currency: "", amount: "item.sum_out_usd" }) %>'
        },
        {
          title: '',
          type: 'string',
          data: '<i class="fa fa-sign-out text-warning"></i>'
        },
        {
          title: '<%= t('widgets.titles.txs') %>',
          type: 'count',
          path: 'count_out',
          data: '%{DATA} <span class="fa fa-list"></span>',
          urlCallbackName: 'transfer_from_path'
        }
      ]
    });
    
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';
    const address = '<%= j @address %>';
    const network = '<%= j params[:network][:network] %>';

    queryWithTimeRange(rr, query, fromDate, tillDate, {
      address: address,
      network: network
    });
  });
</script>
